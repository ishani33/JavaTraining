Java JDBC, Web Technology, Spring and JPA
==========================================
	JSE --> Java Std Edition
	JEE --> Java Enterprise Edition
		a) Web Technologies
		b) Enterprise Java Bean [ Instead of this we learn Spring and JPA]
		c) JMS [ Java Messaging Service]
		d) JNDI ( Java Naming and Directory Interface)
		....

		 Web Technologies : Servlet, JSP

		Servlet Technology --> Allows to write Java Code to run on Servlet engine
		Servlet's are server side java applications


		@WebServlet("/login")
		public class LoginServlet extends HttpServlet {

			public void doGet(HttpServletRequest req, HttpServletResponse res) {
				// code
			}


		}

		SErvelt engine recognizes servelts using metadata

		1) web.xml ==> Deployment descriptor

			<servlet>
				<servlet-name>login</servlet-name>
				<servlet-class>pkg.LoginServlet</servlet-class>
			</servlet>
			<servlet-mapping>
				<servlet-name>login</servlet-name>
				<url-pattern>/login</url-pattern>
			</servlet-mapping>


			public void service(HttpServletRequest req, HttpServletResponse res)
									|
									V
			public void doGet(HttpServletRequest req, HttpServletResponse res) 
			public void doPost(HttpServletRequest req, HttpServletResponse res) 			
			public void doDelete(HttpServletRequest req, HttpServletResponse res) 
			.....


	Database
		use visa;
		drop table product;

		create table products (id int PRIMARY KEY AUTO_INCREMENT, name VARCHAR(100), price double, category VARCHAR(100), count int);

		insert into products values(0, 'iPhone XR', 59000.00, 'mobile', 1000);
		insert into products values(0, 'Sony Bravia', 139000.00, 'tv', 1000);


		Servlet ==> Dynamic content
		HTML ==> Pure Static for Server
		Templates : JSP, Thymeleaf ==> Mix Static and Dynamic content

		JSP ==> Java Server pages meant for dynamic presentaion 
			Every JSP is internally converted to SErvlet


			<%= i %> 

			<%
				out.print(i);
			%>


			Scriptlet <% %>
			Expression <%= %>

			====================================

			Instead of Servlet if we use JSP:
			 <html><body> 
		 <table border='1'> 
		 <tr><th>Name</th><th>Price</th></tr>
		<%
		ProductDao productDao = new ProductDaoJdbcImpl();
		try {
			List<Product> products = productDao.getProducts();
			products.forEach(p -> {
		%>
				 <tr> 
					 <td> <%= p.getName() %></td> 
					 <td> <%= p.getPrice() %> </td>
				</tr>
		<%
			});
		} catch (FetchException e) {
			e.printStackTrace();
			out.print(e.getMessage());
		}

		%>
		
	
	 JSTL ==> Java Server Tag Libraries simplfies writing dynamic content inside JSP page


	 Redirection:
	 	1) Client Side Redirection
	 		response.sendRedirect("index.html");


	 	2) Server Side Redirection
	 		request.getRequestDispatcher("some.jsp").forward(request,response);
	 		Multi-stage processing of data



	 	HTTP Protocol is a Stateless Protocol, doesn't keep track of converstational state of client

	 	Session Tracking is a mechanism using which we can track converstional state.
	 	a) URL-Rewriting
	 	b) Cookies

	 	HttpSession API

	 	// Create a session if session doesn't exist
	 	// or retrive existing session
	 	HttpSession ses = request.getSession(true);


	 	// if session exists get a ref to the session object
	 	HttpSession ses = request.getSession(false);

	 	Adding data into session:
	 	ses.setAttribute(key,value);

	 	Object obj = ses.getAttribute(key);

	 	========

	 	ses.invalidate(); // terminates the session

	 	ses.removeAttribute(key);

	 	ses.setMaxInactiveInterval(duration is seconds);
=============================

Filters
	are used for interceptor patters
	Common things we do with filters:
		a) Security
		b) Encrypt/decrypt
		c) Profile
		d) logging
		e) transaction
=====

	Servlet ==> for Controller [ Application Logic]
	JSP, HTML ==> for PResentation
	Filter ==> Interceptor design pattern
	HttpServletREquest
	HttpServletREsponse
	HttpSession with Cookies/ Url-rewriting
	ServletContext:
		is a wrapper for your application running with an engine
		SerlvetContext/ application
		HttpSession / user
		HttpServletRequest/Response for request

		==> data stored in ServletContext can be shared between users
			Examples:
				Online Bid
				Chating application
	https://github.com/BanuPrakash/VISA_CORE_JULY

	Listener:
		gets invoked based on certain events happening within a container
		they don't have URL pattern

		ServletContextListener
			gets called whenever context is created/destroyed
		HttpSessionListener
			gets called whenever session is created/destroyed
		HttpSessionAttributeListener
			gets called whenever we add/remove attributes
=========================================================================
	Spring Framework and JPA [Java Persistence API] using Hibernate


	Spring Framework
		==> light weight container for building enterprise applications
		==> other frameworks similar are guice, Play

		Major features of Spring Framework:
			a) Inversion Of Control using Dependency Injection Pattern
			b) Enterprise Application Integration
			c) Simplifes web MVC  [Model View Controller]
			d) AOP [ Aspect Oriented Programming]
			e) Declarative and Distributed Transaction Support
			........

		Main feature [ Spring Core]: provides life-cycle managment and DI

		Bean: Sun MS --> any resusable software component

		Bean: Spring --> Any object managed by Spring Container

		Spring Container starts creating objects of classes which has
		on of these annotations:

		@Component
		@Repository
		@Service
		@Controller
		@RestController

		@Repository
		public class ProductDaoJpaImpl implements ProductDao {

		}

		@Service
		public class OrderService {
			@Autowired
			private ProductDao productDao;


		}

		app.xml

		<bean id="a" class="com.visa.prj.dao.ProductDaoJpaImpl" />
		<bean id="b" class="com.visa.prj.service.OrderService" auto-wire="byType" />


		ctx.getBean("b", OrderService.class);
	 	

	 	Combine XML and Annotations:
	 	app.xml
	 	<context:component-scan base-package="com.visa"/>

		<bean id="a" class="com.visa.prj.dao.ProductDaoJpaImpl" />
======================================================================

Client --> Service --> ProductDao ---> ProductDaoJpaImpl

Advantages of using Spring Framework:
	a) loose coupling between layer code
		@Autowired
		private ProductDao productDao;

		VM Arguments:
		-Dspring.profiles.active=prod
		VM Arguments:
		-Dspring.profiles.active=dev
==========================================================

	JDBC ==> Integration API to connect to database.

	ORM ==> Object Relational Mapping
	==> we map java objects to relational database
	==> we map java fields to database columns
	==> simplifies CRUD operations
	==> a wrapper for JDBC
	some popular ORM frameworks:
		a) Hibernate 
		b) TopLink
		c) KODO
		d) OpenJPA
		e) EclipseLink
		f) JDO

	JPA is a specification to use ORM


	PersistenceContext is an environment where entities are managed.
	EntityManager class is used to handle PersistenceContext

	EntityManagerFactory class picks a connection from DataSource pool of database connections, chooses ORM provider and creates EntityManager
=============================

	public class SomeClass {

	}

	@Configuration
	public class MyConfig {

		@Bean
		public SomeClass getSomeClass() {
			SomeClass obj = new SomeClass();
			obj.doThat();
			obj.doThis();
			return obj;
		}
	}
	@Service
	public class OtherClass {
		@Autowired
		private SomeClass obj;

	}


	em.save(p);

	em.find(Product.class,44);

	============================

	java -Dspring.profiles.active=dev ProductClient

	@Configuration
	class MyConfig {

		@Bean
		public Date getDate() {
			return new Date();
		}

		@Bean
		public Connection getcon(Date d) {
			Connection co = DriverManager.getConnection(url,user,pwd);
			return co;

		}
	}

	@Component
	public class Util {
		@Autowired
		private Date d;
		@Autowired
		Connection con;

	}


 @Repository(name="mysql")
 public class MySQLImpl implements ProductDao {

 }	

 @Repository(name="oracle")
 public class OracleImpl implements ProductDao {
 	
 }

 @Service
 public class Service {
 	@Autowired
 	@Qualifier("oracle")
 	ProductDao productDao;
 }
 =====================

 	Bean are Singleton by default


 	@Repository
 	@RequestScoped
 	public class MySQLImpl implements ProductDao {

 	}	
 ==================

 	@Transactional

 	Transactions can be declarative and programmatic

 	Programmatic Tranasctions:
 	JDBC

 	public void transferFunds(Account fromAcc, Account toAcc, double amt) {
 		Connection con = ....;
 		try{	
 			con.setAutoCommit(false);
 				PreparedStatement ps1 = "update account ..."; // fromAcc
 				PreparedStatement ps2 = "update account ..."; // toAcc
 				PreparedStatement ps3 = "insert into transaction values(...)"
 				set IN parameters for ps1, ps2,ps3
 				ps1.excuteUpdate();
 				ps2.excuteUpdate();
 				ps3.excuteUpdate();
 			con.commit();
 		} catch(SQLException ex) {
 			con.rollback();
 		}
 	}


 	@Transactional
 	public void transferFunds(Account fromAcc, Account toAcc, double amt) {

 	}
 	
 	merge(p); // update
 	persist(p); // insert
 	find(Product.class, pk); // selct by pk

 	JPQL ==> Java Persistence Query Language
 	
 SQL 											JPQL
 select * from customers; 						select c from Customer c

 select * from customers where first_name='a'   select c from Customer c
											where c.firstName = 'a'
============
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
	@Discriminator(name="type")
@ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER)
	@JoinTable(name="movie_actor",
		joinColumns= {@JoinColumn(name= "movie_id")}, 
		inverseJoinColumns = {@JoinColumn(name="actor_id")})
=============

Day 5:
	
	Doesn't map to database

	@Transient
	private int someVal;


	bookings

	id | checkin date | check out | user | hotel |
	122								a 		h1
	167								a 		h2
	635								b 		h1



	class Employee {
		empId;

		@OneToOne
		@JoinColumn(name="laptop_id")
		Laptop laptop;	
	}


	class Laptop {
		serialNo;
	}


	EMPLOYEES
	sam 							9922



	LAPTOPS
	3534 
	9922
=========================================

	ManyToMany

		Project and Employee looks like ManyToMany

	 Employee 									Project			
	 email 	name  								pname start_date end_date client


	 		EMPLOYEE_PROJECT
	 		email  				pname  start_Date end_date role
	 		a@visa.com 			p1     x 			y 		JR.DEVELOPER
	 		b@visa,com 			p1
	 		a@visa.com 			p2




	 		class Employee{

	 		}

	 		class Project{

	 		}

	 		class EmployeeProject {
	 			@ManyToOne
	 			@JoinColumn(name="email")
	 			Employee e;
	 			@ManyToOne
	 			@JoinColumn(name="pid")
	 			Project p;
	 		}
=======================

	abstract class Product {
		id,name,price
	}


	class Tv extends Product {
		screenType, screenSize
	}

	class Mobile extends Product {
		camera;
	}

	Single table approach:
	id | name | price | screen_type | screen_size | camera | type
	1 	 Sony   4545 	OLED 			54" 		null 	tv
	2 	 OnePlus   4545 	NULL 	    NULL 		24	 	mobile

	@Entity
	@Inheritance(srategy=InheritanceType.SINGLE_TABLE)
	@Descriminator(name="type")
	abstract class Product {
		id,name,price
	}

	@Entity
	@DescriminatorValue("tv")
	class Tv extends Product {
		screenType, screenSize
	}
	@Entity
	@DescriminatorValue("mobile")
	class Mobile extends Product {
		camera;
	}

	=========================

	TABLE_PER_CLASS

	tvs
	id | name | price | screen_type | screen_size


	mobiles
	id | name | price | camera

	@Entity
	@Inheritance(srategy=InheritanceType.TABLE_PER_CLASS)
	abstract class Product {
		id,name,price
	}

	@Entity
	class Tv extends Product {
		screenType, screenSize
	}
	@Entity
	class Mobile extends Product {
		camera;
	}

	====================

	JOINED

	PRODUCTS
	id | name | price 

	
	tvs
	  screen_type | screen_size


	mobiles
	 camera

	@Entity
	@Inheritance(srategy=InheritanceType.JOINED)
	abstract class Product {
		id,name,price
	}

	@Entity
	class Tv extends Product {
		screenType, screenSize
	}
	@Entity
	class Mobile extends Product {
		camera;
	}
